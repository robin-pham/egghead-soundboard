{"version":3,"sources":["constants.ts","hooks/useAudio.ts","SoundButton.tsx","RandomButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FOLDER","CATEGORIES","addCategory","category","obj","HARDCORE_CLIPS","buttonText","filename","map","GOOD_MORNING_CLIPS","INSPIRATIONAL_CLIPS","MISC_CLIPS","SIMPLE_CLIPS","SOUND_FILES","useAudio","useState","Audio","audio","progress","setProgress","isPlaying","setIsPlaying","useEffect","play","pause","addEventListener","currentTime","duration","removeEventListener","SoundButton","onClick","toggle","t","useCallback","className","RandomButton","randomIdx","setRandomIdx","setTimeout","Math","floor","random","length","key","App","soundProp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69258c0a.chunk.js","sourcesContent":["interface ClipInfo {\n  buttonText: string;\n  filename: string;\n  category?: string;\n}\nconst FOLDER = \"clips\";\nconst CATEGORIES = {\n  HARDCORE: \"Hardcore\",\n  GOOD_MORNING: \"Good Morning\",\n  INSPIRATIONAL: \"Inspirational\",\n  SIMPLE: \"SIMPLE\",\n  MISC: \"MISC\",\n};\n\nconst addCategory = (category: string) => (obj: ClipInfo) => ({ ...obj, category });\n\nconst HARDCORE_CLIPS = [\n  {\n    buttonText: \"Hardcore!\",\n    filename: `${FOLDER}/hardcore.wav`,\n  },\n  {\n    buttonText: \"Hardcore to the Mega\",\n    filename: `${FOLDER}/hardcore-mega.wav`,\n  },\n  {\n    buttonText: \"Hardcore Party\",\n    filename: `${FOLDER}/hardcore-party.wav`,\n  },\n  {\n    buttonText: \"...the Hardcore Plays\",\n    filename: `${FOLDER}/hardcore-plays.wav`,\n  },\n  {\n    buttonText: \"This is Hardcore\",\n    filename: `${FOLDER}/this-is-hardcore.wav`,\n  },\n].map(addCategory(CATEGORIES.HARDCORE));\n\nconst GOOD_MORNING_CLIPS = [\n  {\n    buttonText: \"Good morning yeah!\",\n    filename: `${FOLDER}/good-morning-yeah.wav`,\n  },\n  {\n    buttonText: \"Good morning! Yeah! Pump it up! (x3)\",\n    filename: `${FOLDER}/good-morning-yeah-pump-it.wav`,\n  },\n  {\n    buttonText: \"Good morning comrade. Yeah!\",\n    filename: `${FOLDER}/good-morning-comrades.wav`,\n  },\n].map(addCategory(CATEGORIES.GOOD_MORNING));\n\nconst INSPIRATIONAL_CLIPS = [\n  {\n    buttonText: \"It's nice to be important, but it's important to be nice\",\n    filename: `${FOLDER}/important-to-be-nice.wav`,\n  },\n  {\n    buttonText: \"Incremental progress! Yeah!\",\n    filename: `${FOLDER}/incremental-progress.wav`,\n  },\n  {\n    buttonText: \"Oncore! All right! Yeah!\",\n    filename: `${FOLDER}/oncore-allright.wav`,\n  },\n  {\n    buttonText: \"It's the message...\",\n    filename: `${FOLDER}/the-message.wav`,\n  },\n].map(addCategory(CATEGORIES.INSPIRATIONAL));\n\nconst MISC_CLIPS = [\n  {\n    buttonText: \"Welcome to Revachol! Yeah!\",\n    filename: `${FOLDER}/welcome-to-revachol.wav`,\n  },\n  {\n    buttonText: \"Heavyweight champ\",\n    filename: `${FOLDER}/heavyweight-champ.wav`,\n  },\n  {\n    buttonText: \"Spitting out lyrics the day I was born\",\n    filename: `${FOLDER}/spitting-out-lyrics.wav`,\n  },\n  {\n    buttonText: \"...the place to be.\",\n    filename: `${FOLDER}/the-place-to-be.wav`,\n  },\n].map(addCategory(CATEGORIES.MISC));\n\nconst SIMPLE_CLIPS = [\n  {\n    buttonText: \"Internally coherent\",\n    filename: `${FOLDER}/internally-coherent.wav`,\n  },\n  {\n    buttonText: \"Yeah!\",\n    filename: `${FOLDER}/yeah.wav`,\n  },\n  {\n    buttonText: \"Yeah, request\",\n    filename: `${FOLDER}/yeah-request.wav`,\n  },\n  {\n    buttonText: \"You know about it?\",\n    filename: `${FOLDER}/you-know-about-it.wav`,\n  },\n  {\n    buttonText: \"But there is no question\",\n    filename: `${FOLDER}/no-question.wav`,\n  },\n].map(addCategory(CATEGORIES.SIMPLE));\n\nexport const SOUND_FILES = [\n  ...HARDCORE_CLIPS,\n  ...GOOD_MORNING_CLIPS,\n  ...INSPIRATIONAL_CLIPS,\n  ...SIMPLE_CLIPS,\n  ...MISC_CLIPS,\n];\n","import { useState, useEffect } from \"react\";\n\nconst useAudio = (filename: string) => {\n  const [audio] = useState(new Audio(filename));\n  const [progress, setProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const toggle = () => setIsPlaying(!isPlaying);\n\n  useEffect(() => {\n    isPlaying ? audio.play() : audio.pause();\n  }, [filename, audio, isPlaying]);\n\n  useEffect(() => {\n    audio.addEventListener(\"timeupdate\", () => {\n      setProgress(audio.currentTime / audio.duration);\n    });\n    audio.addEventListener(\"ended\", () => setIsPlaying(false));\n    return () => {\n      audio.removeEventListener(\"ended\", () => setIsPlaying(false));\n      audio.removeEventListener(\"timeupdate\", () => setIsPlaying(false));\n    };\n  }, [filename, audio]);\n\n  return [isPlaying, toggle, progress];\n};\n\nexport default useAudio;\n","import React, { useCallback } from \"react\";\nimport \"./SoundButton.css\";\nimport useAudio from \"./hooks/useAudio\";\n\nexport type SoundProps = {\n  buttonText: string;\n  filename: string;\n  onClick?: () => void;\n};\n\nconst SoundButton: React.FC<SoundProps> = ({ buttonText, filename, onClick }: SoundProps) => {\n  const [, toggle] = useAudio(filename);\n\n  const t = useCallback(() => {\n    if (onClick) onClick();\n    if (typeof toggle === \"function\") {\n      toggle();\n    }\n  }, [onClick, toggle]);\n\n  return (\n    <div>\n      <button className=\"button\" onClick={t}>\n        {buttonText}\n      </button>\n    </div>\n  );\n};\n\nexport default SoundButton;\n","import React, { useState, useCallback } from \"react\";\nimport { SOUND_FILES } from \"./constants\";\nimport SoundButton from \"./SoundButton\";\n\nconst RandomButton = () => {\n  const [randomIdx, setRandomIdx] = useState(0);\n\n  const onClick = useCallback(\n    () => setTimeout(() => setRandomIdx(Math.floor(Math.random() * SOUND_FILES.length)), 1000),\n    [setRandomIdx],\n  );\n\n  return (\n    <SoundButton\n      {...SOUND_FILES[randomIdx]}\n      key={SOUND_FILES[randomIdx].filename}\n      buttonText=\"Random clip!\"\n      onClick={onClick}\n    />\n  );\n};\n\nexport default RandomButton;\n","import React from \"react\";\nimport \"./App.css\";\nimport { SOUND_FILES } from \"./constants\";\nimport SoundButton from \"./SoundButton\";\nimport RandomButton from \"./RandomButton\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"grid\">\n        {SOUND_FILES.map(soundProp => (\n          <SoundButton {...soundProp} />\n        ))}\n        <RandomButton />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}